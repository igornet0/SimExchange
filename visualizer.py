import pygame
import sys
import time
from typing import List, Dict
from simulator import TradingSimulator
from dialog import show_input_dialog
from bot_config_window import show_bot_config_window

# –¶–≤–µ—Ç–∞ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
BLACK = (15, 15, 20)
WHITE = (255, 255, 255)
GREEN = (46, 204, 113)
RED = (231, 76, 60)
BLUE = (52, 152, 219)
GRAY = (149, 165, 166)
DARK_GRAY = (44, 62, 80)
LIGHT_GRAY = (189, 195, 199)
YELLOW = (241, 196, 15)
CYAN = (26, 188, 156)
PURPLE = (155, 89, 182)
ORANGE = (230, 126, 34)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
BACKGROUND = (20, 25, 30)
PANEL_BG = (30, 35, 40)
BORDER = (60, 70, 80)
ACCENT = (52, 152, 219)
SUCCESS = (46, 204, 113)
WARNING = (241, 196, 15)
ERROR = (231, 76, 60)
INFO = (26, 188, 156)

class TradingVisualizer:
    def __init__(self, simulator: TradingSimulator):
        pygame.init()
        self.simulator = simulator
        self.screen_width = 1400
        self.screen_height = 900
        self.screen = pygame.display.set_mode((self.screen_width, self.screen_height))
        pygame.display.set_caption("–°–∏–º—É–ª—è—Ç–æ—Ä –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞")
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        self.font = pygame.font.Font(None, 26)
        self.small_font = pygame.font.Font(None, 20)
        self.large_font = pygame.font.Font(None, 36)
        self.title_font = pygame.font.Font(None, 42)
        
        # –û–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        margin = 20
        self.order_book_rect = pygame.Rect(margin, 80, 450, 500)
        self.price_chart_rect = pygame.Rect(500, 80, 880, 350)
        self.agent_stats_rect = pygame.Rect(500, 450, 880, 400)
        self.control_panel_rect = pygame.Rect(margin, 600, 450, 280)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
        self.bot_toggle_button = pygame.Rect(margin + 15, 600 + 200, 200, 50)
        self.bot_toggle_hover = False
        
        self.is_running = False
        self.cycle_delay = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        clock = pygame.time.Clock()
        
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE:
                        self.is_running = not self.is_running
                    elif event.key == pygame.K_RIGHT:
                        # –û–¥–∏–Ω —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏
                        self.simulator.run_cycle()
                    elif event.key == pygame.K_r:
                        # –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏
                        self.reset_simulation()
                    elif event.key == pygame.K_s:
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–∏–∫–ª–æ–≤ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞
                        self._show_spread_cycles_dialog()
                    elif event.key == pygame.K_b:
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                        self._show_balance_increase_dialog()
                    elif event.key == pygame.K_t:
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
                        self._show_bot_config_dialog()
                    elif event.key == pygame.K_c:
                        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
                        self.simulator.toggle_bot()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1:  # –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
                        mouse_pos = event.pos
                        if self.bot_toggle_button.collidepoint(mouse_pos):
                            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
                            self.simulator.toggle_bot()
                            bot_status = "–≤–∫–ª—é—á–µ–Ω" if self.simulator.trading_bot.config.enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
                            print(f"ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç {bot_status}")
                elif event.type == pygame.MOUSEMOTION:
                    mouse_pos = event.pos
                    self.bot_toggle_hover = self.bot_toggle_button.collidepoint(mouse_pos)
            
            if self.is_running:
                self.simulator.run_cycle()
                time.sleep(self.cycle_delay)
            
            self.draw()
            clock.tick(60)
    
    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        self.screen.fill(BACKGROUND)
        
        # –†–∏—Å—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –ø–∞–Ω–µ–ª–∏ —Å —Ç–µ–Ω—è–º–∏
        self.draw_panel(self.order_book_rect, "[–°–¢–ê–ö–ê–ù] –ë–ò–†–ñ–ï–í–û–ô –°–¢–ê–ö–ê–ù")
        self.draw_panel(self.price_chart_rect, "[–ì–†–ê–§–ò–ö] –ì–†–ê–§–ò–ö –¶–ï–ù–´")
        self.draw_panel(self.agent_stats_rect, "[–ê–ì–ï–ù–¢–´] –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ì–ï–ù–¢–û–í")
        self.draw_panel(self.control_panel_rect, "[–£–ü–†–ê–í–õ–ï–ù–ò–ï] –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.draw_order_book()
        self.draw_price_chart()
        self.draw_agent_stats()
        self.draw_control_panel()
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä –≤–Ω–∏–∑—É
        self.draw_status_bar()
        
        pygame.display.flip()
    
    def draw_panel(self, rect, title):
        """–†–∏—Å—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ç–µ–Ω—å—é –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        # –¢–µ–Ω—å
        shadow_rect = pygame.Rect(rect.x + 3, rect.y + 3, rect.width, rect.height)
        pygame.draw.rect(self.screen, (0, 0, 0, 100), shadow_rect, border_radius=8)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        pygame.draw.rect(self.screen, PANEL_BG, rect, border_radius=8)
        pygame.draw.rect(self.screen, BORDER, rect, 2, border_radius=8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        title_rect = pygame.Rect(rect.x + 15, rect.y - 35, rect.width - 30, 30)
        pygame.draw.rect(self.screen, ACCENT, title_rect, border_radius=6)
        self.draw_text(title, rect.x + 20, rect.y - 30, self.large_font, WHITE)
    
    def draw_status_bar(self):
        """–†–∏—Å—É–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
        status_rect = pygame.Rect(0, self.screen_height - 40, self.screen_width, 40)
        pygame.draw.rect(self.screen, DARK_GRAY, status_rect)
        pygame.draw.rect(self.screen, BORDER, status_rect, 1)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
        data = self.simulator.get_simulation_data()
        status = "[RUN] –ó–ê–ü–£–©–ï–ù–ê" if self.is_running else "[STOP] –û–°–¢–ê–ù–û–í–õ–ï–ù–ê"
        status_color = SUCCESS if self.is_running else ERROR
        
        self.draw_text(f"–°—Ç–∞—Ç—É—Å: {status}", 20, self.screen_height - 30, self.small_font, status_color)
        self.draw_text(f"–¶–∏–∫–ª: {data['cycle']}", 200, self.screen_height - 30, self.small_font, WHITE)
        self.draw_text(f"–°–¥–µ–ª–æ–∫: {data['total_trades']}", 350, self.screen_height - 30, self.small_font, WHITE)
        self.draw_text(f"–û–±—ä–µ–º: {data['total_volume']}", 500, self.screen_height - 30, self.small_font, WHITE)
    
    def draw_order_book(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫"""
        data = self.simulator.get_simulation_data()
        order_book = data['order_book']
        
        y_offset = 20
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        current_price = order_book['current_price']
        price_rect = pygame.Rect(self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, 200, 35)
        pygame.draw.rect(self.screen, ACCENT, price_rect, border_radius=6)
        self.draw_text(f"–¶–ï–ù–ê: {current_price:.2f}", 
                      self.order_book_rect.x + 25, self.order_book_rect.y + y_offset + 8, self.large_font, WHITE)
        y_offset += 45
        
        # –°–ø—Ä–µ–¥
        spread = order_book['spread']
        if spread:
            spread_color = SUCCESS if spread < 1.0 else WARNING if spread < 5.0 else ERROR
            self.draw_text(f"–°–ü–†–ï–î: {spread:.2f}", 
                          self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.small_font, spread_color)
            y_offset += 25
        
        # –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥
        avg_spread = data.get('average_spread')
        if avg_spread is not None:
            cycles = data.get('avg_spread_cycles', 50)
            self.draw_text(f"–°–†.–°–ü–†–ï–î ({cycles}): {avg_spread:.2f}", 
                          self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.small_font, INFO)
            y_offset += 25
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        balance_cycles = data.get('balance_increase_cycles', 100)
        balance_amount = data.get('balance_increase_amount', 1000)
        next_increase = data.get('next_balance_increase', 0)
        self.draw_text(f"–ë–ê–õ–ê–ù–°+: –∫–∞–∂–¥—ã–µ {balance_cycles} —Ü–∏–∫–ª–æ–≤", 
                      self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.small_font, CYAN)
        y_offset += 20
        self.draw_text(f"–°–£–ú–ú–ê: {balance_amount:.0f}", 
                      self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.small_font, CYAN)
        y_offset += 20
        self.draw_text(f"–û–°–¢–ê–õ–û–°–¨: {next_increase} —Ü–∏–∫–ª–æ–≤", 
                      self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.small_font, WARNING)
        y_offset += 30
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        header_rect = pygame.Rect(self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.order_book_rect.width - 30, 25)
        pygame.draw.rect(self.screen, DARK_GRAY, header_rect, border_radius=4)
        self.draw_text("–¶–ï–ù–ê", self.order_book_rect.x + 20, self.order_book_rect.y + y_offset + 3, self.small_font, WHITE)
        self.draw_text("–ö–û–õ-–í–û", self.order_book_rect.x + 160, self.order_book_rect.y + y_offset + 3, self.small_font, WHITE)
        self.draw_text("–ê–ì–ï–ù–¢", self.order_book_rect.x + 260, self.order_book_rect.y + y_offset + 3, self.small_font, WHITE)
        y_offset += 30
        
        # –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (ASK)
        ask_header_rect = pygame.Rect(self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.order_book_rect.width - 30, 20)
        pygame.draw.rect(self.screen, (231, 76, 60, 50), ask_header_rect, border_radius=3)
        self.draw_text("[–ü–†–û–î–ê–ñ–ê] ASK", self.order_book_rect.x + 20, self.order_book_rect.y + y_offset + 2, self.small_font, RED)
        y_offset += 25
        
        for i, level in enumerate(order_book['sell_levels'][:6]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-6
            # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
            row_color = (40, 45, 50) if i % 2 == 0 else (35, 40, 45)
            row_rect = pygame.Rect(self.order_book_rect.x + 15, self.order_book_rect.y + y_offset - 2, self.order_book_rect.width - 30, 18)
            pygame.draw.rect(self.screen, row_color, row_rect, border_radius=2)
            
            self.draw_text(f"{level['price']:.2f}", self.order_book_rect.x + 20, self.order_book_rect.y + y_offset, self.small_font, RED)
            self.draw_text(f"{level['quantity']}", self.order_book_rect.x + 160, self.order_book_rect.y + y_offset, self.small_font, WHITE)
            self.draw_text(f"{level['agent_id']}", self.order_book_rect.x + 260, self.order_book_rect.y + y_offset, self.small_font, LIGHT_GRAY)
            y_offset += 20
        
        y_offset += 10
        
        # –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (BID)
        bid_header_rect = pygame.Rect(self.order_book_rect.x + 15, self.order_book_rect.y + y_offset, self.order_book_rect.width - 30, 20)
        pygame.draw.rect(self.screen, (46, 204, 113, 50), bid_header_rect, border_radius=3)
        self.draw_text("[–ü–û–ö–£–ü–ö–ê] BID", self.order_book_rect.x + 20, self.order_book_rect.y + y_offset + 2, self.small_font, GREEN)
        y_offset += 25
        
        for i, level in enumerate(order_book['buy_levels'][:6]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-6
            # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
            row_color = (40, 45, 50) if i % 2 == 0 else (35, 40, 45)
            row_rect = pygame.Rect(self.order_book_rect.x + 15, self.order_book_rect.y + y_offset - 2, self.order_book_rect.width - 30, 18)
            pygame.draw.rect(self.screen, row_color, row_rect, border_radius=2)
            
            self.draw_text(f"{level['price']:.2f}", self.order_book_rect.x + 20, self.order_book_rect.y + y_offset, self.small_font, GREEN)
            self.draw_text(f"{level['quantity']}", self.order_book_rect.x + 160, self.order_book_rect.y + y_offset, self.small_font, WHITE)
            self.draw_text(f"{level['agent_id']}", self.order_book_rect.x + 260, self.order_book_rect.y + y_offset, self.small_font, LIGHT_GRAY)
            y_offset += 20
    
    def draw_price_chart(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"""
        data = self.simulator.get_simulation_data()
        prices = data['price_history']
        
        if len(prices) < 2:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        min_price = min(prices)
        max_price = max(prices)
        price_range = max_price - min_price
        
        if price_range == 0:
            price_range = 1
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        chart_width = self.price_chart_rect.width - 40
        chart_height = self.price_chart_rect.height - 60
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞
        chart_bg_rect = pygame.Rect(self.price_chart_rect.x + 20, self.price_chart_rect.y + 30, chart_width, chart_height)
        pygame.draw.rect(self.screen, (25, 30, 35), chart_bg_rect, border_radius=6)
        pygame.draw.rect(self.screen, BORDER, chart_bg_rect, 1, border_radius=6)
        
        # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
        for i in range(5):
            y = self.price_chart_rect.y + 30 + (i * chart_height) // 4
            pygame.draw.line(self.screen, (50, 55, 60), 
                           (self.price_chart_rect.x + 20, y), 
                           (self.price_chart_rect.x + 20 + chart_width, y), 1)
        
        # –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(10):
            x = self.price_chart_rect.x + 20 + (i * chart_width) // 9
            pygame.draw.line(self.screen, (50, 55, 60), 
                           (x, self.price_chart_rect.y + 30), 
                           (x, self.price_chart_rect.y + 30 + chart_height), 1)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        points = []
        for i, price in enumerate(prices):
            x = self.price_chart_rect.x + 20 + (i * chart_width) // len(prices)
            y = self.price_chart_rect.y + 30 + chart_height - int(((price - min_price) / price_range) * chart_height)
            points.append((x, y))
        
        # –†–∏—Å—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
        if len(points) > 1:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è –∑–∞–ª–∏–≤–∫–∏
            polygon_points = [(self.price_chart_rect.x + 20, self.price_chart_rect.y + 30 + chart_height)]
            polygon_points.extend(points)
            polygon_points.append((self.price_chart_rect.x + 20 + chart_width, self.price_chart_rect.y + 30 + chart_height))
            
            # –†–∏—Å—É–µ–º –∑–∞–ª–∏–≤–∫—É
            pygame.draw.polygon(self.screen, (52, 152, 219, 30), polygon_points)
            
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
            pygame.draw.lines(self.screen, ACCENT, False, points, 3)
            
            # –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏
            for point in points[::max(1, len(points)//20)]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é 20-—é —Ç–æ—á–∫—É
                pygame.draw.circle(self.screen, ACCENT, point, 3)
        
        # –ü–æ–¥–ø–∏—Å–∏ —Ü–µ–Ω
        for i in range(5):
            price = min_price + (i * price_range) // 4
            y = self.price_chart_rect.y + 30 + (i * chart_height) // 4
            price_text = f"{price:.1f}"
            text_surface = self.small_font.render(price_text, True, LIGHT_GRAY)
            text_rect = text_surface.get_rect()
            self.draw_text(price_text, self.price_chart_rect.x + 5, y - text_rect.height//2, self.small_font, LIGHT_GRAY)
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        if prices:
            current_price = prices[-1]
            current_y = self.price_chart_rect.y + 30 + chart_height - int(((current_price - min_price) / price_range) * chart_height)
            pygame.draw.line(self.screen, WARNING, 
                           (self.price_chart_rect.x + 20, current_y), 
                           (self.price_chart_rect.x + 20 + chart_width, current_y), 2)
    
    def draw_agent_stats(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤"""
        data = self.simulator.get_simulation_data()
        agents = data['agents']
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        y_offset = 20
        header_rect = pygame.Rect(self.agent_stats_rect.x + 15, self.agent_stats_rect.y + y_offset, self.agent_stats_rect.width - 30, 30)
        pygame.draw.rect(self.screen, DARK_GRAY, header_rect, border_radius=6)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        self.draw_text("ID", self.agent_stats_rect.x + 25, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–°–¢–†", self.agent_stats_rect.x + 60, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–ë–ê–õ", self.agent_stats_rect.x + 110, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–ü–û–ó", self.agent_stats_rect.x + 190, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–ü–û–†–¢", self.agent_stats_rect.x + 260, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–ü–†–û–§", self.agent_stats_rect.x + 340, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–ó–ê–Ø–í", self.agent_stats_rect.x + 430, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        self.draw_text("–†–ò–°–ö", self.agent_stats_rect.x + 510, self.agent_stats_rect.y + y_offset + 5, self.small_font, WHITE)
        
        y_offset += 25
        
        # –î–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–æ–≤
        for i, agent in enumerate(agents[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15 –∞–≥–µ–Ω—Ç–æ–≤
            # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
            row_color = (40, 45, 50) if i % 2 == 0 else (35, 40, 45)
            row_rect = pygame.Rect(self.agent_stats_rect.x + 15, self.agent_stats_rect.y + y_offset - 2, self.agent_stats_rect.width - 30, 20)
            pygame.draw.rect(self.screen, row_color, row_rect, border_radius=3)
            
            # ID —Å —Ä–∞–Ω–≥–æ–º
            rank_text = "1st" if i == 0 else "2nd" if i == 1 else "3rd" if i == 2 else f"{i+1:2d}"
            self.draw_text(rank_text, self.agent_stats_rect.x + 20, self.agent_stats_rect.y + y_offset, self.small_font, WHITE)
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
            strategy_name = agent.get('strategy', 'UNKNOWN')[:4]  # –ü–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞
            strategy_color = self._get_strategy_color(strategy_name)
            self.draw_text(strategy_name, self.agent_stats_rect.x + 60, self.agent_stats_rect.y + y_offset, self.small_font, strategy_color)
            
            # –ë–∞–ª–∞–Ω—Å
            balance_color = SUCCESS if agent['balance'] > 0 else ERROR
            self.draw_text(f"{agent['balance']:.0f}", self.agent_stats_rect.x + 110, self.agent_stats_rect.y + y_offset, self.small_font, balance_color)
            
            # –ü–æ–∑–∏—Ü–∏—è
            position_color = SUCCESS if agent['position'] > 0 else ERROR if agent['position'] < 0 else LIGHT_GRAY
            position_symbol = "+" if agent['position'] > 0 else "" if agent['position'] < 0 else "0"
            self.draw_text(f"{position_symbol}{agent['position']}", self.agent_stats_rect.x + 190, self.agent_stats_rect.y + y_offset, self.small_font, position_color)
            
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å
            portfolio_color = SUCCESS if agent['portfolio_value'] > 0 else ERROR
            self.draw_text(f"{agent['portfolio_value']:.0f}", self.agent_stats_rect.x + 260, self.agent_stats_rect.y + y_offset, self.small_font, portfolio_color)
            
            # –ü—Ä–æ—Ñ–∏—Ç
            profit = agent.get('profit', 0)
            profit_percent = agent.get('profit_percent', 0)
            profit_color = SUCCESS if profit > 0 else ERROR if profit < 0 else LIGHT_GRAY
            profit_symbol = "+" if profit > 0 else "" if profit < 0 else "0"
            profit_text = f"{profit_symbol}{profit:+.0f} ({profit_percent:+.1f}%)"
            self.draw_text(profit_text, self.agent_stats_rect.x + 340, self.agent_stats_rect.y + y_offset, self.small_font, profit_color)
            
            # –ó–∞—è–≤–∫–∏ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞/–≤—Å–µ–≥–æ)
            buy_orders = agent.get('buy_orders', 0)
            sell_orders = agent.get('sell_orders', 0)
            total_orders = agent.get('total_orders', 0)
            orders_text = f"{buy_orders}/{sell_orders}/{total_orders}"
            orders_color = SUCCESS if total_orders > 0 else GRAY
            self.draw_text(orders_text, self.agent_stats_rect.x + 430, self.agent_stats_rect.y + y_offset, self.small_font, orders_color)
            
            # –†–∏—Å–∫
            risk = agent['risk_tolerance']
            risk_color = ERROR if risk > 0.7 else WARNING if risk > 0.4 else SUCCESS
            risk_symbol = "H" if risk > 0.7 else "M" if risk > 0.4 else "L"
            self.draw_text(f"{risk_symbol}{risk:.2f}", self.agent_stats_rect.x + 510, self.agent_stats_rect.y + y_offset, self.small_font, risk_color)
            
            y_offset += 22
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        y_offset += 20
        total_volume = data['total_volume']
        self.draw_text(f"–û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {total_volume}", 
                      self.agent_stats_rect.x + 10, self.agent_stats_rect.y + y_offset, self.small_font, WHITE)
        
        # –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –∞–≥–µ–Ω—Ç—ã
        if agents:
            best_agent = agents[0]  # –ü–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
            worst_agent = agents[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
            
            y_offset += 20
            best_orders = f"{best_agent['buy_orders']}/{best_agent['sell_orders']}/{best_agent['total_orders']}"
            self.draw_text(f"–õ—É—á—à–∏–π: ID{best_agent['id']} ({best_agent['strategy'][:4]}) {best_agent['profit']:+.0f} [{best_orders}]", 
                          self.agent_stats_rect.x + 10, self.agent_stats_rect.y + y_offset, self.small_font, GREEN)
            
            y_offset += 15
            worst_orders = f"{worst_agent['buy_orders']}/{worst_agent['sell_orders']}/{worst_agent['total_orders']}"
            self.draw_text(f"–•—É–¥—à–∏–π: ID{worst_agent['id']} ({worst_agent['strategy'][:4]}) {worst_agent['profit']:+.0f} [{worst_orders}]", 
                          self.agent_stats_rect.x + 10, self.agent_stats_rect.y + y_offset, self.small_font, RED)
    
    def draw_control_panel(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        y_offset = 20
        
        # –°—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        status_rect = pygame.Rect(self.control_panel_rect.x + 15, self.control_panel_rect.y + y_offset, self.control_panel_rect.width - 30, 40)
        status_color = SUCCESS if self.is_running else ERROR
        pygame.draw.rect(self.screen, status_color, status_rect, border_radius=8)
        
        status = "[RUN] –ó–ê–ü–£–©–ï–ù–ê" if self.is_running else "[STOP] –û–°–¢–ê–ù–û–í–õ–ï–ù–ê"
        self.draw_text(f"–°—Ç–∞—Ç—É—Å: {status}", self.control_panel_rect.x + 25, self.control_panel_rect.y + y_offset + 12, self.font, WHITE)
        y_offset += 50
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        self.draw_text("[–£–ü–†–ê–í–õ–ï–ù–ò–ï]:", self.control_panel_rect.x + 15, self.control_panel_rect.y + y_offset, self.small_font, WHITE)
        y_offset += 25
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = [
            ("[>]", "–ü–†–û–ë–ï–õ", "–ó–∞–ø—É—Å–∫/–û—Å—Ç–∞–Ω–æ–≤–∫–∞"),
            ("[>]", "–°–¢–†–ï–õ–ö–ê –í–ü–†–ê–í–û", "–û–¥–∏–Ω —à–∞–≥"),
            ("[R]", "R", "–°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏"),
            ("[S]", "S", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞"),
            ("[B]", "B", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"),
            ("[T]", "T", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"),
            ("[C]", "C", "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞")
        ]
        
        for symbol, key, description in controls:
            # –§–æ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button_rect = pygame.Rect(self.control_panel_rect.x + 15, self.control_panel_rect.y + y_offset - 2, self.control_panel_rect.width - 30, 25)
            pygame.draw.rect(self.screen, (40, 45, 50), button_rect, border_radius=4)
            
            self.draw_text(f"{symbol} {key}", self.control_panel_rect.x + 20, self.control_panel_rect.y + y_offset, self.small_font, ACCENT)
            self.draw_text(description, self.control_panel_rect.x + 120, self.control_panel_rect.y + y_offset, self.small_font, LIGHT_GRAY)
            y_offset += 28
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        y_offset += 10
        self.draw_text("[–ë–û–¢]:", self.control_panel_rect.x + 15, self.control_panel_rect.y + y_offset, self.small_font, WHITE)
        y_offset += 20
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        data = self.simulator.get_simulation_data()
        bot_stats = data.get('bot_statistics', {})
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_status = "–í–ö–õ" if bot_stats.get('enabled', False) else "–í–´–ö–õ"
        bot_status_color = SUCCESS if bot_stats.get('enabled', False) else ERROR
        self.draw_text(f"–°—Ç–∞—Ç—É—Å: {bot_status}", self.control_panel_rect.x + 20, self.control_panel_rect.y + y_offset, self.small_font, bot_status_color)
        y_offset += 20
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞—è–≤–æ–∫
        interval = bot_stats.get('order_interval', 10)
        self.draw_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Ü–∏–∫–ª–æ–≤", self.control_panel_rect.x + 20, self.control_panel_rect.y + y_offset, self.small_font, LIGHT_GRAY)
        y_offset += 18
        
        # –¢–∏–ø –∑–∞—è–≤–æ–∫
        order_type = bot_stats.get('order_type', 'random')
        self.draw_text(f"–¢–∏–ø: {order_type}", self.control_panel_rect.x + 20, self.control_panel_rect.y + y_offset, self.small_font, LIGHT_GRAY)
        y_offset += 18
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        orders_placed = bot_stats.get('orders_placed', 0)
        buy_orders = bot_stats.get('buy_orders', 0)
        sell_orders = bot_stats.get('sell_orders', 0)
        self.draw_text(f"–ó–∞—è–≤–∫–∏: {buy_orders}/{sell_orders}/{orders_placed}", self.control_panel_rect.x + 20, self.control_panel_rect.y + y_offset, self.small_font, LIGHT_GRAY)
        y_offset += 18
        
        # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
        total_volume = bot_stats.get('total_volume', 0)
        self.draw_text(f"–û–±—ä–µ–º: {total_volume}", self.control_panel_rect.x + 20, self.control_panel_rect.y + y_offset, self.small_font, LIGHT_GRAY)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
        y_offset += 30
        self._draw_bot_toggle_button()
    
    def _draw_bot_toggle_button(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_stats = self.simulator.get_simulation_data()
        bot_enabled = bot_stats.get('bot_statistics', {}).get('enabled', False)
        
        # –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ hover
        if self.bot_toggle_hover:
            button_color = self.button_hover_color
        else:
            button_color = SUCCESS if bot_enabled else ERROR
        
        # –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É
        pygame.draw.rect(self.screen, button_color, self.bot_toggle_button, border_radius=8)
        pygame.draw.rect(self.screen, BORDER, self.bot_toggle_button, 2, border_radius=8)
        
        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = "ü§ñ –í–´–ö–õ–Æ–ß–ò–¢–¨ –ë–û–¢–ê" if bot_enabled else "ü§ñ –í–ö–õ–Æ–ß–ò–¢–¨ –ë–û–¢–ê"
        text_surface = self.text_font.render(button_text, True, WHITE)
        text_rect = text_surface.get_rect(center=self.bot_toggle_button.center)
        self.screen.blit(text_surface, text_rect)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_text = "–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
        hint_surface = self.small_font.render(hint_text, True, LIGHT_GRAY)
        hint_rect = hint_surface.get_rect()
        hint_x = self.bot_toggle_button.right + 10
        hint_y = self.bot_toggle_button.centery - hint_rect.height // 2
        self.screen.blit(hint_surface, (hint_x, hint_y))
    
    def draw_text(self, text, x, y, font, color):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        text_surface = font.render(text, True, color)
        self.screen.blit(text_surface, (x, y))
    
    def _get_strategy_color(self, strategy_name: str) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        strategy_colors = {
            'MOME': YELLOW,      # Momentum
            'MEAN': CYAN,        # Mean Reversion
            'MARK': GREEN,       # Market Maker
            'SCAL': RED,         # Scalper
            'VALU': BLUE,        # Value Investor
            'NOIS': GRAY,        # Noise Trader
        }
        return strategy_colors.get(strategy_name, WHITE)
    
    def _show_spread_cycles_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞"""
        current_cycles = self.simulator.avg_spread_cycles
        result = show_input_dialog(
            self.screen,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞",
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ (1-1000):",
            str(current_cycles)
        )
        
        if result:
            try:
                cycles = int(result)
                if 1 <= cycles <= 1000:
                    self.simulator.set_avg_spread_cycles(cycles)
                    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {cycles} —Ü–∏–∫–ª–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞")
                else:
                    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
    
    def _show_balance_increase_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        data = self.simulator.get_simulation_data()
        current_cycles = data.get('balance_increase_cycles', 100)
        current_amount = data.get('balance_increase_amount', 1000)
        
        # –î–∏–∞–ª–æ–≥ –¥–ª—è —Ü–∏–∫–ª–æ–≤
        cycles_result = show_input_dialog(
            self.screen,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ (1-10000):",
            str(current_cycles)
        )
        
        if cycles_result:
            try:
                cycles = int(cycles_result)
                if 1 <= cycles <= 10000:
                    # –î–∏–∞–ª–æ–≥ –¥–ª—è —Å—É–º–º—ã
                    amount_result = show_input_dialog(
                        self.screen,
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
                        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è (0-100000):",
                        str(int(current_amount))
                    )
                    
                    if amount_result:
                        try:
                            amount = float(amount_result)
                            if 0 <= amount <= 100000:
                                self.simulator.set_balance_increase_settings(cycles, amount)
                            else:
                                print("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100000")
                        except ValueError:
                            print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
                else:
                    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
    
    def _show_bot_config_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        bot_config = self.simulator.trading_bot.config
        
        # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        def on_config_changed(config_updates):
            print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
            for key, value in config_updates.items():
                print(f"  {key}: {value}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = show_bot_config_window(
            self.screen, 
            bot_config, 
            on_config_changed
        )
        
        if result:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    def reset_simulation(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        self.is_running = False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        initial_price = self.simulator.order_book.initial_price
        num_agents = len(self.simulator.agents)
        initial_balance = self.simulator.agents[0].balance if self.simulator.agents else 10000.0
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä
        from simulator import TradingSimulator
        self.simulator = TradingSimulator(initial_price, num_agents, initial_balance)
        
        print("–°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!")
