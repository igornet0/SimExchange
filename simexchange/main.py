#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SimExchange —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python -m simexchange.main [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    -p, --price     –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100.0)
    -c, --cycles    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)
    -a, --agents    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)
    -b, --balance   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10000.0)
    --config        –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    --modern-ui     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: True)

–ü—Ä–∏–º–µ—Ä—ã:
    python -m simexchange.main -a 100                    # 100 –∞–≥–µ–Ω—Ç–æ–≤
    python -m simexchange.main -p 200 -a 50 -b 20000     # –¶–µ–Ω–∞ 200, 50 –∞–≥–µ–Ω—Ç–æ–≤, –±–∞–ª–∞–Ω—Å 20000
    python -m simexchange.main --config custom_config.yaml  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
"""

import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from simexchange.config.settings import ConfigManager
from simexchange.core.models import SimulationConfig
from simexchange.core.services import TradingSimulator


def create_simulation_config(args) -> SimulationConfig:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config_manager = ConfigManager(args.config) if args.config else ConfigManager()
    config = config_manager.get_simulation_config()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.price is not None:
        config.initial_price = args.price
    if args.agents is not None:
        config.num_agents = args.agents
    if args.balance is not None:
        config.initial_balance = args.balance
    
    return config


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–°–∏–º—É–ª—è—Ç–æ—Ä –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument('-p', '--price', type=float, default=None,
                       help='–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)')
    parser.add_argument('-c', '--cycles', type=int, default=1000,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)')
    parser.add_argument('-a', '--agents', type=int, default=None,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)')
    parser.add_argument('-b', '--balance', type=float, default=None,
                       help='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)')
    parser.add_argument('--config', type=str, default=None,
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--modern-ui', action='store_true', default=True,
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: True)')
    parser.add_argument('--legacy-ui', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π UI')
    parser.add_argument('--no-ui', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ UI (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å)')
    parser.add_argument('--performance-test', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º UI
    use_modern_ui = args.modern_ui and not args.legacy_ui and not args.no_ui
    use_legacy_ui = args.legacy_ui and not args.no_ui
    use_ui = not args.no_ui
    
    print("=" * 60)
    print("üöÄ SIMEXCHANGE - –°–ò–ú–£–õ–Ø–¢–û–† –ë–ò–†–ñ–ï–í–û–ì–û –°–¢–ê–ö–ê–ù–ê")
    print("=" * 60)
    print("üì¶ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v0.2.0")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = create_simulation_config(args)
        
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {config.initial_price}")
        print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {args.cycles}")
        print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: {config.num_agents}")
        print(f"üíµ –ë–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç–∞: {config.initial_balance}")
        print(f"‚ö° –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {'–í–∫–ª—é—á–µ–Ω' if config.performance_mode else '–í—ã–∫–ª—é—á–µ–Ω'}")
        print("=" * 60)
        
        if args.performance_test:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            run_performance_test(config)
        elif use_ui:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å UI
            run_with_ui(config, use_modern_ui)
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            run_console_mode(config, args.cycles)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


def run_performance_test(config: SimulationConfig):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    from simexchange.utils.performance import PerformanceTester
    
    tester = PerformanceTester(config)
    tester.run_test()


def run_with_ui(config: SimulationConfig, use_modern_ui: bool):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Å UI"""
    print("üñ•Ô∏è  –ó–∞–ø—É—Å–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    simulator = TradingSimulator(config)
    
    if use_modern_ui:
        print("üé® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI")
        from simexchange.ui.windows.modern_main_window import ModernMainWindow
        visualizer = ModernMainWindow(simulator)
    else:
        print("üé® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π UI")
        from simexchange.ui.windows.legacy_main_window import LegacyMainWindow
        visualizer = LegacyMainWindow(simulator)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    visualizer.run()


def run_console_mode(config: SimulationConfig, cycles: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üíª –ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("  ENTER - –û–¥–∏–Ω —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏")
    print("  'r' + ENTER - –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏")
    print("  'q' + ENTER - –í—ã—Ö–æ–¥")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    simulator = TradingSimulator(config)
    
    cycle_count = 0
    
    while cycle_count < cycles:
        try:
            command = input(f"–¶–∏–∫–ª {cycle_count + 1}/{cycles} > ").strip().lower()
            
            if command == 'q':
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏")
                break
            elif command == 'r':
                print("üîÑ –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏")
                simulator.reset()
                cycle_count = 0
                continue
            elif command == '' or command == 's':
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª
                trades = simulator.run_cycle()
                cycle_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                data = simulator.get_simulation_data()
                print(f"  üí∞ –¶–µ–Ω–∞: {data['order_book']['current_price']:.2f}")
                print(f"  üìä –°–¥–µ–ª–æ–∫: {len(trades)}")
                print(f"  üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {data['total_trades']}")
                print(f"  üíµ –û–±—ä–µ–º: {data['total_volume']}")
                
                if data.get('average_spread'):
                    print(f"  üìè –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {data['average_spread']:.2f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∞–≥–µ–Ω—Ç–æ–≤
                agents = data['agents'][:3]
                print("  üèÜ –¢–æ–ø –∞–≥–µ–Ω—Ç—ã:")
                for i, agent in enumerate(agents, 1):
                    print(f"    {i}. ID{agent['id']}: {agent['profit']:+.0f} ({agent['profit_percent']:+.1f}%)")
            else:
                print("  ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ENTER, 'r', –∏–ª–∏ 'q'")
                
        except EOFError:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏")
            break
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            break
    
    print(f"\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–ø–æ–ª–Ω–µ–Ω–æ {cycle_count} —Ü–∏–∫–ª–æ–≤")


if __name__ == "__main__":
    main()
