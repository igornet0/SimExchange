"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import time
from typing import Dict, Any, List
from ..core.models import SimulationConfig
from ..core.services import TradingSimulator


class PerformanceTester:
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
    
    def __init__(self, config: SimulationConfig):
        self.config = config
        self.results: List[Dict[str, Any]] = []
    
    def run_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤
        test_cycles = [100, 500, 1000, 2000, 5000]
        
        for cycles in test_cycles:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {cycles} —Ü–∏–∫–ª–æ–≤...")
            result = self._test_cycles(cycles)
            self.results.append(result)
            
            print(f"‚úÖ {cycles} —Ü–∏–∫–ª–æ–≤ –∑–∞ {result['total_time']:.2f} —Å–µ–∫ "
                  f"({result['cycles_per_second']:.1f} —Ü–∏–∫–ª–æ–≤/—Å–µ–∫)")
            print(f"   üíæ –ü–∞–º—è—Ç—å: {result['memory_usage']:.1f} MB")
            print(f"   üìà –°–¥–µ–ª–æ–∫: {result['total_trades']}")
            print(f"   üíµ –û–±—ä–µ–º: {result['total_volume']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        self._print_summary()
    
    def _test_cycles(self, cycles: int) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        simulator = TradingSimulator(self.config)
        
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        simulator.set_performance_mode(True, skip_volatility=True)
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ –ø–∞–º—è—Ç—å
        start_time = time.time()
        start_memory = self._get_memory_usage()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª—ã
        for i in range(cycles):
            simulator.run_cycle()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ü–∏–∫–ª–æ–≤
            if (i + 1) % 100 == 0:
                elapsed = time.time() - start_time
                cycles_per_second = (i + 1) / elapsed
                print(f"  –¶–∏–∫–ª {i + 1}: {cycles_per_second:.1f} —Ü–∏–∫–ª–æ–≤/—Å–µ–∫")
        
        end_time = time.time()
        end_memory = self._get_memory_usage()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        data = simulator.get_simulation_data()
        
        return {
            'cycles': cycles,
            'total_time': end_time - start_time,
            'cycles_per_second': cycles / (end_time - start_time),
            'memory_usage': end_memory - start_memory,
            'total_trades': data['total_trades'],
            'total_volume': data['total_volume'],
            'final_price': data['order_book']['current_price'],
            'agents_count': len(data['agents'])
        }
    
    def _get_memory_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            import psutil
            import os
            process = psutil.Process(os.getpid())
            return process.memory_info().rss / 1024 / 1024
        except ImportError:
            # –ï—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            return 0.0
    
    def _print_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "=" * 50)
        print("üìà –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 50)
        
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        best_performance = max(self.results, key=lambda x: x['cycles_per_second'])
        worst_performance = min(self.results, key=lambda x: x['cycles_per_second'])
        
        print(f"üèÜ –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {best_performance['cycles_per_second']:.1f} —Ü–∏–∫–ª–æ–≤/—Å–µ–∫ "
              f"({best_performance['cycles']} —Ü–∏–∫–ª–æ–≤)")
        print(f"üêå –•—É–¥—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {worst_performance['cycles_per_second']:.1f} —Ü–∏–∫–ª–æ–≤/—Å–µ–∫ "
              f"({worst_performance['cycles']} —Ü–∏–∫–ª–æ–≤)")
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_performance = sum(r['cycles_per_second'] for r in self.results) / len(self.results)
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_performance:.1f} —Ü–∏–∫–ª–æ–≤/—Å–µ–∫")
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        total_memory = sum(r['memory_usage'] for r in self.results)
        print(f"üíæ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {total_memory:.1f} MB")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
        total_trades = sum(r['total_trades'] for r in self.results)
        total_volume = sum(r['total_volume'] for r in self.results)
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"üíµ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {total_volume}")
        
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    def save_results(self, filename: str = "performance_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        import json
        from datetime import datetime
        
        results_data = {
            'timestamp': datetime.now().isoformat(),
            'config': {
                'initial_price': self.config.initial_price,
                'num_agents': self.config.num_agents,
                'initial_balance': self.config.initial_balance,
                'performance_mode': self.config.performance_mode
            },
            'results': self.results
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results_data, f, indent=2, ensure_ascii=False)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def benchmark_simulation(config: SimulationConfig, cycles: int = 1000) -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    simulator = TradingSimulator(config)
    simulator.set_performance_mode(True, skip_volatility=True)
    
    start_time = time.time()
    
    for _ in range(cycles):
        simulator.run_cycle()
    
    end_time = time.time()
    
    data = simulator.get_simulation_data()
    
    return {
        'cycles': cycles,
        'total_time': end_time - start_time,
        'cycles_per_second': cycles / (end_time - start_time),
        'total_trades': data['total_trades'],
        'total_volume': data['total_volume'],
        'final_price': data['order_book']['current_price']
    }
